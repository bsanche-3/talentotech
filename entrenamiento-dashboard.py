import streamlit as st
import pandas as pd
import numpy as np
import os
from google.generativeai import genai

# T√≠tulo del dashboard
st.title('Agroindustria en Colombia')

# Generar datos aleatorios
np.random.seed(42)  # Para resultados reproducibles
data = pd.DataFrame(
    np.random.randn(150, 8),
    columns=['Producci√≥n de Caf√©', 'Producci√≥n de Cacao', 'Producci√≥n de Palma', 'Exportaciones de Caf√©', 'Exportaciones de Cacao', 'Exportaciones de Palma', 'Consumo Interno de Caf√©', 'Consumo Interno de Cacao']
)

# KPIs principales
col1, col2, col3 = st.columns(3)
col1.metric("üìä Producci√≥n Total", f"{data[['Producci√≥n de Caf√©', 'Producci√≥n de Cacao', 'Producci√≥n de Palma']].sum().sum():,.2f} Tn")
col2.metric("üö¢ Exportaciones Totales", f"{data[['Exportaciones de Caf√©', 'Exportaciones de Cacao', 'Exportaciones de Palma']].sum().sum():,.2f} Tn")
col3.metric("üí∞ Consumo Interno Total", f"{data[['Consumo Interno de Caf√©', 'Consumo Interno de Cacao']].sum().sum():,.2f} Tn")

# Mostrar los datos en la aplicaci√≥n de Streamlit
st.write("Datos aleatorios de agroindustria en Colombia")
st.write(data)

# Selecci√≥n de variables para la figura
selected_variables = st.multiselect('Seleccione las variables para la figura', data.columns, default=data.columns[:2])

# Selecci√≥n del tipo de gr√°fico
graph_type = st.selectbox('Seleccione el tipo de gr√°fico', ['L√≠nea', 'Barra', '√Årea'])

# Mostrar la figura
if len(selected_variables) >= 2:
    if graph_type == 'L√≠nea':
        st.line_chart(data[selected_variables])
    elif graph_type == 'Barra':
        st.bar_chart(data[selected_variables])
    elif graph_type == '√Årea':
        st.area_chart(data[selected_variables])
else:
    st.warning('Por favor, seleccione al menos dos variables para la figura.')

# Crear bot√≥n para obtener an√°lisis de la gr√°fica
if st.button("Obtener An√°lisis de Gr√°fica"):
    df_seleccionado = data[selected_variables]
    describe_df = df_seleccionado.describe().transpose()
    describe_values = describe_df.to_dict(orient="index")

    prompt = f"""
    Analiza y dame recomendaciones a partir de un an√°lisis descriptivo de los siguientes datos:
    {describe_values}
    correspondiente a la gr√°fica de tipo {graph_type}.
    """
    
    def obtener_analisis_gemini(prompt):
        # Obtener la clave API desde la variable de entorno
        api_key = os.getenv('GEMINI_API_KEY_TALENTOTECH')

        if api_key is None:
            raise ValueError("La clave API de Gemini no est√° configurada. Aseg√∫rate de configurar la variable de entorno 'GEMINI_API_KEY_TALENTOTECH'.")

        # Usar la API de Gemini
        client = genai.Client(api_key=api_key)

        # Definir el contexto para el modelo de Gemini
        sys_instruct = """
        Eres un asistente de an√°lisis de datos. Tu tarea es proporcionar an√°lisis descriptivos detallados y √∫tiles para los datos proporcionados. 
        Aseg√∫rate de explicar cualquier patr√≥n, tendencia o anomal√≠a que observes en los datos. 
        Proporciona recomendaciones basadas en el an√°lisis cuando sea posible.
        """

        response = client.models.generate_content(
            model="gemini-2.0-flash",
            config=genai.types.GenerateContentConfig(
                system_instruction=sys_instruct,
                temperature=0.1
            ),
            contents=prompt,
        )

        return response.text.strip()

    analisis = obtener_analisis_gemini(prompt)
    st.write("An√°lisis de Gr√°fica:")
    st.write(analisis)
